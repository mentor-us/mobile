name: Deploy to Google (Version 2)

on:
  push:
    branches:
      - develop
      - feature/MU-55-deloy-app-google
    # paths:
    #   - src
    #   - .github/workflows/deloy-to-google-ver2.yml

  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./src"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "11"
          cache: "gradle"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true 
      
      - name: Install Fastlane
        run: |
          bundle install
          bundle update fastlane

      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Create Google Services JSON File
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.MENTORUS_MOBILE_JSON_KEY }}
        run: echo $GOOGLE_SERVICES_JSON | base64 -di > ./mentorus-mobile.json

      - name: Build and sign APK
        run: |
          cp ./.env.prod ./.env
          bundle exec fastlane android release

      - name: Upload APK to Google Play
        run: |
          bundle exec fastlane android deploy
          
      # - name: Build and sign APK
      #   run: |
      #     cp ./.env.prod ./.env
      #     cd android
      #     ./gradlew assembleRelease --no-daemon

      # - name: Upload APK to Google Play
      #   run: |
      #     bundle exec fastlane supply --json_key_data ${{ secrets.MENTORUS_MOBILE_JSON_KEY }} --package_name com.mentorus --aab android/app/build/outputs/bundle/release/app-release.aab --skip_upload_metadata --skip_upload_images --skip_upload_screenshots

      # - name: Upload APK to Google Play
      #   run: |
      #       fastlane supply --track production --json_key ${{ secrets.GOOGLE_PLAY_JSON_KEY }} --package_name com.mentorus --apk app-release.aab --skip_upload_metadata --skip_upload_images --skip_upload_screenshots
